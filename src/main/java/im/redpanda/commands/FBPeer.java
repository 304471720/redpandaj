// automatically generated by the FlatBuffers compiler, do not modify

package im.redpanda.commands;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FBPeer extends Table {
  public static FBPeer getRootAsFBPeer(ByteBuffer _bb) { return getRootAsFBPeer(_bb, new FBPeer()); }
  public static FBPeer getRootAsFBPeer(ByteBuffer _bb, FBPeer obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public FBPeer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte nodeId(int j) { int o = __offset(4); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int nodeIdLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer nodeIdAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nodeIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String ip() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ipAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer ipInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public short port() { int o = __offset(8); return o != 0 ? bb.getShort(o + bb_pos) : 0; }

  public static int createFBPeer(FlatBufferBuilder builder,
      int nodeIdOffset,
      int ipOffset,
      short port) {
    builder.startObject(3);
    FBPeer.addIp(builder, ipOffset);
    FBPeer.addNodeId(builder, nodeIdOffset);
    FBPeer.addPort(builder, port);
    return FBPeer.endFBPeer(builder);
  }

  public static void startFBPeer(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addNodeId(FlatBufferBuilder builder, int nodeIdOffset) { builder.addOffset(0, nodeIdOffset, 0); }
  public static int createNodeIdVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startNodeIdVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addIp(FlatBufferBuilder builder, int ipOffset) { builder.addOffset(1, ipOffset, 0); }
  public static void addPort(FlatBufferBuilder builder, short port) { builder.addShort(2, port, 0); }
  public static int endFBPeer(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

