// automatically generated by the FlatBuffers compiler, do not modify

package im.redpanda.commands;

import java.nio.*;
import java.lang.*;
import java.util.*;

import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class SendPublicKey extends Table {
    public static SendPublicKey getRootAsSendPublicKey(ByteBuffer _bb) {
        return getRootAsSendPublicKey(_bb, new SendPublicKey());
    }

    public static SendPublicKey getRootAsSendPublicKey(ByteBuffer _bb, SendPublicKey obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public void __init(int _i, ByteBuffer _bb) {
        bb_pos = _i;
        bb = _bb;
        vtable_start = bb_pos - bb.getInt(bb_pos);
        vtable_size = bb.getShort(vtable_start);
    }

    public SendPublicKey __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public byte publicKey(int j) {
        int o = __offset(4);
        return o != 0 ? bb.get(__vector(o) + j * 1) : 0;
    }

    public int publicKeyLength() {
        int o = __offset(4);
        return o != 0 ? __vector_len(o) : 0;
    }

    public ByteBuffer publicKeyAsByteBuffer() {
        return __vector_as_bytebuffer(4, 1);
    }

    public ByteBuffer publicKeyInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 4, 1);
    }

    public static int createSendPublicKey(FlatBufferBuilder builder,
                                          int publicKeyOffset) {
        builder.startObject(1);
        SendPublicKey.addPublicKey(builder, publicKeyOffset);
        return SendPublicKey.endSendPublicKey(builder);
    }

    public static void startSendPublicKey(FlatBufferBuilder builder) {
        builder.startObject(1);
    }

    public static void addPublicKey(FlatBufferBuilder builder, int publicKeyOffset) {
        builder.addOffset(0, publicKeyOffset, 0);
    }

    public static int createPublicKeyVector(FlatBufferBuilder builder, byte[] data) {
        builder.startVector(1, data.length, 1);
      for (int i = data.length - 1; i >= 0; i--) {
        builder.addByte(data[i]);
      }
        return builder.endVector();
    }

    public static void startPublicKeyVector(FlatBufferBuilder builder, int numElems) {
        builder.startVector(1, numElems, 1);
    }

    public static int endSendPublicKey(FlatBufferBuilder builder) {
        int o = builder.endObject();
        return o;
    }

    public static void finishSendPublicKeyBuffer(FlatBufferBuilder builder, int offset) {
        builder.finish(offset);
    }

    public static void finishSizePrefixedSendPublicKeyBuffer(FlatBufferBuilder builder, int offset) {
        builder.finishSizePrefixed(offset);
    }
}

